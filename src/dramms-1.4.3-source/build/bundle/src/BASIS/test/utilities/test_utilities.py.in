#! /usr/bin/env python

##############################################################################
# @file  test_utilities.py
# @brief Test BASIS utilities.
#
# This test first builds the test project which is based on BASIS and then
# triggers the execution of the separate test cases which are built as part
# of this test project.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.<br />
# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
##############################################################################

import sys

from testaux import *

# ============================================================================
# main
# ============================================================================

# ----------------------------------------------------------------------------
if __name__ == '__main__':
    true_values = ['TRUE', 'ON', '1'];
    # parse arguments
    verbose = 0
    opts = parse_arguments()
    for o, a in opts:
        if o in ['--verbose', '-v']: verbose = verbose + 1
        else: assert False, "Unhandled option " + o
    # create project
    use = []
    if '@TEST_PYTHON_UTILITIES@'.upper() in true_values:
        use.append('PythonInterp')
    if '@TEST_PERL_UTILITIES@'.upper() in true_values:
        use.append('Perl')
    if '@TEST_BASH_UTILITIES@'.upper() in true_values:
        use.append('BASH')
    create_project('UtilitiesTest', description='Test of BASIS utilities.', use=use)
    # copy files to project
    add_file('helloworld.cxx', prefix='src') # example executable
    add_file('test_ExecutableTargetInfo.cxx.in', prefix='test')
    add_file('test_stdaux.cxx.in', prefix='test')
    if 'PythonInterp' in use:
        add_file('test_executabletargetinfo.py.in', prefix='test')
        add_file('test_stdaux.py.in', prefix='test')
    if 'Perl' in use:
        add_file('test_ExecutableTargetInfo.pl.in', prefix='test')
        add_file('test_stdaux.pl.in', prefix='test')
    if 'BASH' in use:
        add_file('test_executabletargetinfo.sh.in', prefix='test')
        add_file('test_stdaux.sh.in', prefix='test')
    # edit CMakeLists.txt files
    add_cmake_code('src/CMakeLists.txt',  'basis_add_executable(helloworld.cxx)')
    add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_ExecutableTargetInfo.cxx UNITTEST)')
    add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_stdaux.cxx UNITTEST)')
    if 'PythonInterp' in use:
        add_cmake_code('test/CMakeLists.txt', 'basis_add_executable(test_executabletargetinfo_py test_executabletargetinfo.py)')
        add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_executabletargetinfo_py COMMAND test_executabletargetinfo_py)')
        add_cmake_code('test/CMakeLists.txt', 'basis_add_executable(test_stdaux_py test_stdaux.py)')
        add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_stdaux_py COMMAND test_stdaux_py)')
    if 'Perl' in use:
        add_cmake_code('test/CMakeLists.txt', 'basis_add_executable(test_ExecutableTargetInfo_pl test_ExecutableTargetInfo.pl)')
        add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_ExecutableTargetInfo_pl COMMAND test_ExecutableTargetInfo_pl)')
        add_cmake_code('test/CMakeLists.txt', 'basis_add_executable(test_stdaux_pl test_stdaux.pl)')
        add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_stdaux_pl COMMAND test_stdaux_pl)')
    if 'BASH' in use:
        add_cmake_code('test/CMakeLists.txt', 'basis_add_executable(test_executabletargetinfo_sh test_executabletargetinfo.sh)')
        add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_executabletargetinfo_sh COMMAND test_executabletargetinfo_sh)')
        add_cmake_code('test/CMakeLists.txt', 'basis_add_executable(test_stdaux_sh test_stdaux.sh)')
        add_cmake_code('test/CMakeLists.txt', 'basis_add_test(test_stdaux_sh COMMAND test_stdaux_sh)')
    # build project
    build_project(verbose)
    # run tests
    run_tests(verbose)

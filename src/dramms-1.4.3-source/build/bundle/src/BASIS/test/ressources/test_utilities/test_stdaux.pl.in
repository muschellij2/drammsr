#! /usr/bin/env perl

##############################################################################
# @file  test_stdaux.pl
# @brief Test standard auxiliary functions of BASIS utilities.
#
# Copyright (c) 2011, 2012 University of Pennsylvania. All rights reserved.<br />
# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
##############################################################################


package Basis;
use UtilitiesTest::Basis qw(execute exedir);
package main;

use Test::More tests => 28;

# ============================================================================
# tests
# ============================================================================
 
my @retval;
my $retval;

# ----------------------------------------------------------------------------
# Test exceptions when execute() is not used as intended.
eval { Basis::execute(); };
isnt $@, '', 'exception when no arguments given';
eval { Basis::execute(''); };
isnt $@, '', 'exception when empty string as command given';
eval { Basis::execute([]); };
isnt $@, '', 'exception when empty array as command given';
eval { Basis::execute(['']); };
isnt $@, '', 'exception when array with empty string as element as command given';

# ----------------------------------------------------------------------------
# Test type of return value of execute().
eval { @retval = Basis::execute('basis.dummy_command'); };
is $@, '', 'no exception when running dummy command';
is scalar @retval, 1, 'stdout option defaults to false';
eval { @retval = Basis::execute('basis.dummy_command', stdout => 0); };
is $@, '', 'no exception when running dummy command with stdout option false';
is scalar @retval, 1, 'only exit code returned when stdout is false';
eval { @retval = Basis::execute('basis.dummy_command', stdout => 1); };
is $@, '', 'no exception when running dummy command with stdout option true';
is scalar @retval, 2, 'exit code and STDOUT returned when stdout is true';
eval { @retval = Basis::execute('basis.dummy_command', stdout => 1, allow_fail => 1); };
is $@, '', 'no exception when running dummy command with stdout and allow_fail options true';
is scalar @retval, 2, 'exit code and STDOUT returned when allow_fail and stdout are both true';

# ----------------------------------------------------------------------------
# Test execution of executable target.
is Basis::execute(['basis.dummy_command']), 0, 'execution of command by target name using array notation';
eval { @retval = Basis::execute(['basis.dummy_command', '--greet'], stdout => 1, quiet => 1, allow_fail => 1); };
is $retval[0], 0, 'exit code is 0';
like $retval[1], qr/^Hello, BASIS!\s*\r?\n/, 'messages to STDOUT properly returned even though quiet is true';

# ----------------------------------------------------------------------------
# Test allow_fail keyword argument of execute().
eval { Basis::execute('basis.dummy_command --exit 1'); };
isnt $@, '', 'exception when exit code is non-zero and allow_fail not specified';
eval { Basis::execute('basis.dummy_command --exit 1', allow_fail => 0); };
isnt $@, '', 'exception when exit code is non-zero and allow_fail is false';
eval { Basis::execute('basis.dummy_command --exit 1', allow_fail => 1); };
is $@, '', 'no exception when exit code is non-zero and allow_fail is true';

# ----------------------------------------------------------------------------
# Test redirection of STDOUT and STDERR

# the error messages of the child process shall be redirected to the STDERR
# of the parent process, i.e., this test process even if the quiet flag of
# execute() is set to true
open STDERR, '>test_stdaux_pl.stderr';
open STDOUT, '>test_stdaux_pl.stdout';
eval { Basis::execute('basis.dummy_command --greet --warn', quiet => 1); };
is $@, '', 'no exception when running dummy command';
close STDERR;
close STDOUT;
ok -z 'test_stdaux_pl.stdout', 'no messages printed to STDOUT due to quiet option';
unlink 'test_stdaux.stdout';
open LOG, '<test_stdaux_pl.stderr' or die "Failed to open temporary error log!\n";
@log = <LOG>;
close LOG;
is scalar @log, 1, 'error log contains one line';
chomp($log[0]);
is $log[0], 'WARNING: Cannot greet in other languages!', 'warning was printed to STDERR log';
unlink 'test_stdaux.stderr';

# ----------------------------------------------------------------------------
# Test verbose keyword argument of execute().
eval { @retval = Basis::execute('basis.dummy_command', verbose => 1, quiet => 1, stdout => 1, allow_fail => 1); };
is $retval[0], 0, 'exit code is 0 when running dummy command';
is $retval[1], '', 'verbose message of execute() printed to STDOUT of parent, not child';
eval { @retval = Basis::execute('basis.dummy_command', verbose => 2, quiet => 1, stdout => 1, allow_fail => 1); };
is $retval[0], 0, 'exit code is 0 when running dummy command';
is $retval[1], '', 'verbose message of execute() printed to STDOUT of parent, not child';

# ----------------------------------------------------------------------------
# Test execution of some non-target command.
my $directory = Basis::exedir();
if ($^O eq 'MSWin32') {
    is Basis::execute(['dir', $directory], quiet => 1), 0, 'execution of non-target command using array argument';
    is Basis::execute('dir ' . $directory, quiet => 1), 0, 'execution of non-target command using string argument';
} else {
    is Basis::execute(['ls', $directory], quiet => 1), 0, 'execution of non-target command using array argument';
    is Basis::execute('ls ' . $directory, quiet => 1), 0, 'execution of non-target command using string argument';
}

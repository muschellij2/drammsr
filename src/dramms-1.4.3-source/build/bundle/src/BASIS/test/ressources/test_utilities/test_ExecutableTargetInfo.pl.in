#! /usr/bin/env perl

##############################################################################
# @file  test_ExecutableTargetInfo.pl
# @brief Test executable target related functions of BASIS utilities.
#
# Copyright (c) 2011, 2012 University of Pennsylvania. All rights reserved.<br />
# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
##############################################################################

package Basis;
use UtilitiesTest::Basis qw(targetuid istarget exepath exename exedir);
package main;

use Test::More tests => 19;

# ============================================================================
# tests
# ============================================================================

# ----------------------------------------------------------------------------
# Test Basis::targetuid().

is (Basis::targetuid ('basisproject'), 'basisproject',
    'target of other project unmodified');
is (Basis::targetuid ('unknown'), 'unknown',
    'unknown target unmodified');
is (Basis::targetuid ('basis.basisproject'), 'basis.basisproject',
    'UID remains unchanged');
is (Basis::targetuid ('hammer.hammer'), 'hammer.hammer',
    'UID remains unchanged');
is (Basis::targetuid ('.hello'), '.hello',
    'global namespace remains unchanged');
is (Basis::targetuid (undef), undef,
    'invalid argument results in undef as return value');
is (Basis::targetuid (''), undef,
    'invalid argument results in undef as return value');

# ----------------------------------------------------------------------------
# Test Basis::istarget().

ok (!Basis::istarget ('basisproject'),
    'basisproject not part of UtilitiesTest');
ok (Basis::istarget ('basis.basisproject'),
    'basis.basisproject is a known target');
ok (!Basis::istarget (undef),
    'undefined argument is unknown target');
ok (!Basis::istarget (''),
    'empty target string is unknown target');
ok (!Basis::istarget ('hammer.hammer'),
    'some unknown target');

# ----------------------------------------------------------------------------
# Test Basis::exename().

# name of this executable
like (Basis::exename (),
    qr/^test_ExecutableTargetInfo_pl(\.cmd)?$/,
    "name of this executable");
# name of executable built by some target
like (Basis::exename ('basis.basisproject'),
    qr/^basisproject(\.cmd)?$/,
    "name of basis.basisproject executable");

# ----------------------------------------------------------------------------
# Test Basis::exedir().

# directory of this executable
like (Basis::exedir (),
    qr/[\/\\]Testing[\/\\]Temporary[\/\\]test_utilities[\/\\]build[\/\\]Testing[\/\\]bin/,
    "directory of this executable");
# directory of executable built by some target
like (Basis::exedir ('basis.basisproject'),
    qr/^([A-Z]:)?[\/\\].*[\/\\]bin([\/\\]basis)?$/,
    "directory of basis.basisproject executable");

# ----------------------------------------------------------------------------
# Test Basis::exepath().

# path of this executable
is (Basis::exepath (),
    Basis::exedir () . '/' . Basis::exename (),
    "path of this executable");
# path of executable built by some target
my $target = 'basis.basisproject';
is (Basis::exepath ($target),
    Basis::exedir ($target) . '/' . Basis::exename ($target),
    "path of $target executable");
# path of some system command
if ($^O =~ m/MSWin32/) {
    $target   = 'regedit';
    $expected = 'c:\\windows\\regedit.exe';
} else {
    $target = 'ls';
    $expected = '/bin/ls';
}
is (lc(Basis::exepath ($target)), $expected);

/**
 * @file  test_stdaux.cxx
 * @brief Test standard auxiliary functions of BASIS utilities.
 *
 * Copyright (c) 2011, 2012 University of Pennsylvania. All rights reserved.<br />
 * See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
 *
 * Contact: SBIA Group <sbia-software at uphs.upenn.edu>
 */

#include <basis/test.h>

#include <basis/os.h>             // exedir()
#include <vector>
#include <string>
#include <stdio.h>                // remove(), freopen()
#include <fstream>

#include <utilitiestest/basis.h>

// stdout/stderr redirection - dup(), dup2(), fileno(), close()
#if WINDOWS
#  define _CRT_SECURE_NO_DEPRECATE
#  define _CRT_SECURE_NO_WARNINGS
#  include <io.h>
#else
#  include <unistd.h>   
#  define _dup dup
#  define _dup2 dup2
#  define _fileno fileno
#  define _close close
#endif


using namespace std;
using namespace utilitiestest;


// ---------------------------------------------------------------------------
// Test exception when basis::execute() is not used as intended.
TEST(StdAux, ExecuteProcessInvalidUse)
{
    vector<string> argv;
    EXPECT_THROW(execute(""),   basis::util::SubprocessError);
    EXPECT_THROW(execute(argv), basis::util::SubprocessError);
}

// ---------------------------------------------------------------------------
// Test execution of executable target.
TEST(StdAux, ExecuteTarget)
{
    vector<string> args;
    int status;
    std::ostringstream output;
    EXPECT_NO_THROW(status = execute("basis.dummy_command"));
    EXPECT_EQ(0, status) << "exit code of basis.dummy_command is 0";
    EXPECT_NO_THROW(status = execute("basis.dummy_command --greet", true, &output));
    EXPECT_EQ(0, status) << "exit code of basis.dummy_command --greet is 0";
#if WINDOWS
    EXPECT_STREQ("Hello, BASIS!\r\n", output.str().c_str());
#else
    EXPECT_STREQ("Hello, BASIS!\n", output.str().c_str());
#endif
    args.clear();
    output.str("");
    args.push_back("basis.dummy_command");
    args.push_back("--greet");
    EXPECT_NO_THROW(status = execute(args, true, &output));
    EXPECT_EQ(0, status) << "exit code of basis.dummy_command --warn is 0";
#if WINDOWS
    EXPECT_STREQ("Hello, BASIS!\r\n", output.str().c_str());
#else
    EXPECT_STREQ("Hello, BASIS!\n", output.str().c_str());
#endif
}

// ---------------------------------------------------------------------------
// Test redirection of STDOUT and STDERR
TEST(StdAux, Redirection)
{
    // The redirection of stderr and stdout using rdbuf() only works for
    // output to cerr and cout, respectively, but not for output to
    // stderr and stdout using fprintf() or printf(). Therefore, freopen()
    // has to be used, which captures both output written to cerr or cout,
    // and output written via fprintf() or printf().
#if 0
    // redirect stdout and stderr to log files
    ofstream outlog("test_stdaux.stdout");
    ASSERT_TRUE(outlog.is_open());
    ofstream errlog("test_stdaux.stderr");
    ASSERT_TRUE(errlog.is_open());
    streambuf* outbuf = cout.rdbuf(outlog.rdbuf());
    streambuf* errbuf = cerr.rdbuf(errlog.rdbuf());
    // basis::execute subprocess
    int status = 0;
    EXPECT_NO_THROW(status = basis::execute("basis.dummy_command --greet --warn", true));
    EXPECT_EQ(0, status);
    // restore stdout and stderr output streams
    outlog.close();
    errlog.close();
    cout.rdbuf(outbuf);
    cerr.rdbuf(errbuf);
#else
    // redirect stdout and stderr to log files
    int stdout_dup = _dup(1);
    int stderr_dup = _dup(2);
    FILE* outlog = fopen("test_stdaux.stdout", "w");
    FILE* errlog = fopen("test_stdaux.stderr", "w");
    ASSERT_TRUE(outlog != NULL);
    ASSERT_TRUE(errlog != NULL);
    _dup2(_fileno(outlog), 1);
    _dup2(_fileno(errlog), 2);
    // basis::execute subprocess
    int status = 0;
    EXPECT_NO_THROW(status = execute("basis.dummy_command --greet --warn", true));
    EXPECT_EQ(0, status);
    // restore stdout and stderr output streams
    _dup2(stdout_dup, 1);
    _dup2(stdout_dup, 2);
    _close(stdout_dup);
    _close(stderr_dup);
    fclose(outlog);
    fclose(errlog);
#endif
    ifstream log;
    char buf[1024];
    // read stdout log files and verify expected content
    log.open("test_stdaux.stdout");
    EXPECT_TRUE(log.good());
    log.getline(buf, 1024);
    log.close();
    log.clear();
    EXPECT_STREQ("", buf);
    remove("test_stdaux.stdout");
    // read stderr log files and verify expected content
    log.open("test_stdaux.stderr");
    EXPECT_TRUE(log.good());
    log.getline(buf, 1024);
    log.close();
    if (buf[strlen(buf) - 1] == '\r') buf[strlen(buf) - 1] = '\0';
    EXPECT_STREQ("WARNING: Cannot greet in other languages!", buf);
    remove("test_stdaux.stderr");
}

// ---------------------------------------------------------------------------
// Test execution of some non-target command.
TEST(StdAux, ExecuteCommand)
{
#if WINDOWS
    string args = "dir";
#else
    string args = "ls";
#endif
    args += " ";
    args += exedir();
    int status = 0;
    std::ostringstream output;
    ASSERT_NO_THROW(status = execute(args, true, &output));
    EXPECT_EQ(0, status) << "exit code of dir or ls is 0";
    EXPECT_STRNE("", output.str().c_str()) << "output of dir or ls is not empty";
}

#! /bin/bash

##############################################################################
# @file  basistest-master.sh
# @brief Test master which can be run as a cron job.
#
# This shell script is supposed to be scheduled as cron job, where possibly
# the basistest-cron.sh script is in fact used as cron job command without
# arguments where all the settings for the cron job are fixed within this
# latter script. On execution, this master script parses the configuration
# file and executes the configured tests using by default the
# basistest-slave.sh script.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.<br />
# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#
# @ingroup Tools
##############################################################################

. ${BASIS_BASH_UTILITIES} || exit 1

# ============================================================================
# constants
# ============================================================================

exedir  _EXEC_DIR  && readonly _EXEC_DIR
exename _EXEC_NAME && readonly _EXEC_NAME

# ============================================================================
# default settings
# ============================================================================

# absolute path of tests configuration file
conf_file='/etc/basistest.conf'

# absolute path of file with timestamps for next test execution
schedule_file='/var/run/basistest.schedule'

# ============================================================================
# help/version
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Print documentation of options.
#
# @returns Nothing.
function print_options
{
    cat - << EOF-OPTIONS
Options:
  -c [ --conf ]       The test configuration file. Defaults to "${conf_file}".
  -t [ --testcmd ]    The test execution command. Defaults to the basistest
                      command in the same directory as this executable.
  -s [ --schedule ]   The test schedule file which is created and updated by
                      this program. Defaults to "${schedule_file}".
  --dry               Dry run, i.e., do not actually invoke the test execution command.
  -v [ --verbose ]    Increases verbosity of output messages. Can be given multiple times.
  -h [ --help ]       Print help and exit.
  -u [ --usage ]      Print short help and exit.
  -V [ --version ]    Print version information and exit.
EOF-OPTIONS
}

# ----------------------------------------------------------------------------
## @brief Print help.
#
# @returns Nothing.
function print_help
{
    echo "Usage:"
    echo "  ${_EXEC_NAME} [options]"
    echo
    cat - << EOF-DESCRIPTION
Description:
  This so-called testing master script is executed by the basistest-cron command.
  On each run, it reads in the configuration file given by the --config option
  line-by-line. Each line in the configuration file specifies one test job to be
  executed. See the next section for details on the format and content of such
  configuration file.

Configuration:
  The format of the configuration file is detailed here. Comments within the
  configuration file start with a '#' character at the beginning of each line.

  For each test of a specific branch of a project, the configuration file
  contains a line following the format:

    <m> <h> <d> <project> <branch> <model> <options>

  where

    <m>         Interval in minutes between consecutive test runs.
                Defaults to "0" if "*" is given.
    <h>         Interval in hours between consecutive test runs.
                Defaults to "0" if "*" is given.
    <d>         Interval in days (i.e., multiples of 24 hours) between consecutive
                test runs. Defaults to "0" if "*" is given.
    <project>   Name of the BASIS project.
    <branch>    Branch within the project's SVN repository, e.g., "tags/1.0.0".
                Defaults to "trunk" if a "*" is given.
    <model>     Dashboard model, i.e., either one of "Nightly", "Continuous",
                and "Experimental". Defaults to "Nightly".
    <options>   Additional options to the CTest script.
                The "basistest.ctest" script of BASIS is used by default.
                Run "ctest -S <path>/basistest.ctest,usage" to get a list of
                available options. By default, the default options of the
                CTest script are used. Note that this option can in particular
                be used to define CMake variables for the build configuration.

  Attention: Neither of these entries may contain any whitespace character!

  For example, nightly tests of the main development branch (trunk) of the
  project BASIS itself which are run once every day including coverage
  analysis and memory checks are scheduled by

    * * 1 BASIS trunk Nightly coverage,memcheck

Test execution:
  By default, the basistest-slave command is invoked for each entry in the
  configuration file. A custom test command can be set using the option --testcmd.
  The provided command has to support the following command line arguments.

    --project <arg>   The name of the project as given in the configuration.
    --branch <arg>    The branch as given in the configuration.
    --model <arg>     The name of the model as given in the configuration.
    --args <arg>      The additional options given in the configuration.
    --verbose         Enable verbose output messages. May be given multiple times.

  The --args and --verbose options have to be optional.
EOF-DESCRIPTION
    echo
    print_options
    echo
    cat - << EOF-EXAMPLES
Examples:
  ${_EXEC_NAME} --conf /etc/basis/testd.conf --schedule /var/run/basis/testd

    Runs this daemon with the configuration file "/etc/basis/testd.conf",
    where the test schedule "/var/run/basis/testd" is created (or updated).
    Note that this command should be setup as cron job instead of executing
    it manually.
EOF-EXAMPLES
    echo
    print_contact
}

# ----------------------------------------------------------------------------
## @brief Print usage (i.e., only usage and options).
#
# @returns Nothing.
function print_helpshort
{
    echo "Usage:"
    echo "  ${_EXEC_NAME} [options]"
    echo
    print_options
    echo
    print_contact
}

# ============================================================================
# helpers
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Runs a test given the arguments in the configuration file.
#
# @param [in] project Name of the project to test.
# @param [in] branch  Name of the branch to test.
# @param [in] model   Name of the Dashboard model.
# @param [in] options Additional options for the CTest script.
#
# @returns Whether the execution of the test was successful.
#
# @retval 0 On success.
# @retval 1 On failure.
function run_test
{
    cmd="${test_cmd}"
    if [ ${verbose} -gt 1 ]; then cmd="${cmd} --verbose"; fi
    if [ ${verbose} -gt 2 ]; then cmd="${cmd} --verbose"; fi
    cmd="${cmd} --project $1 --branch $2 --model $3"
    if [ ! -z "$4" ]; then cmd="${cmd} --args $4"; fi
    if [ ${verbose} -gt 0 ]; then
        echo "$ ${cmd}"
    fi
    if [ "${dry}" == 'false' ]; then
        if [ ${verbose} -gt 0 ]; then
            ${cmd}
        else
            ${cmd} > /dev/null # avoid messages such as "Your job has been submitted"
        fi
        return $?
    fi
    return 0
}

# ----------------------------------------------------------------------------
## @brief Convert date to timestamp.
#
# @param [in] date Date.
#
# @returns Prints timestamp corresponding to given date to @c STDOUT.
function date2stamp
{
    if [ $(uname) == 'Darwin' ]; then
        date -j -f '%Y-%m-%d %T' "$1" +%s
    else
        date -d "$1" +%s
    fi
}

# ----------------------------------------------------------------------------
## @brief Convert timestamp to date.
#
# @param [in] stamp Timestamp.
#
# @return Prints date corresponding to given timestamp to @c STDOUT.
function stamp2date
{
    if [ $(uname) == 'Darwin' ]; then
      date -j -r $1 '+%Y-%m-%d %T'
    else
      date -d "1970-01-01 $1 sec UTC" '+%Y-%m-%d %T'
    fi
}

# ----------------------------------------------------------------------------
## @brief Adds a certain time interval to a given date.
#
# @param [in] unit     Unit of the time interval. Either one of -s, -m, -h, or -d.
#                      Defaults to number of days.
# @param [in] date     The date to which the time interval is added.
# @param [in] interval The time interval given in the specified units.
#
# @returns Prints the date which is @p interval time units after the given
#          date to @c STDOUT.
function date_add
{
    case $1 in
        -s) sec=1;      shift;;
        -m) sec=60;     shift;;
        -h) sec=3600;   shift;;
        -d) sec=86400;  shift;;
         *) sec=86400;;
    esac
    local dte1=$(date2stamp "$1")
    local interval=$2
    local add_sec=$((dte1 + interval * sec))
    echo $(stamp2date "${add_sec}")
}

# ----------------------------------------------------------------------------
## @brief Computes the time interval between two given dates.
#
# @param [in] unit  Unit of the time interval. Either one of -s, -m, -h, or -d.
#                   Defaults to number of days.
# @param [in] date1 The first date.
# @param [in] date2 The second date.
#
# @return Prints time interval, i.e., an absolute value, in the given units
#         to @c STDOUT.
function date_diff
{
    case $1 in
        -s) sec=1;      shift;;
        -m) sec=60;     shift;;
        -h) sec=3600;   shift;;
        -d) sec=86400;  shift;;
         *) sec=86400;;
    esac
    local dte1=$(date2stamp "$1")
    local dte2=$(date2stamp "$2")
    local interval=$((dte2 - dte1))
    echo $((interval / sec))
}

# ----------------------------------------------------------------------------
## @brief Get next scheduled date of a given test.
#
# @returns Prints date to @c STDOUT.
function schedule_date
{
    local retval=$(date '+%Y-%m-%d %T')
    idx=0
    numtests=${#schedule[@]}
    while [ ${idx} -lt ${numtests} ]; do
        parts=(${schedule[${idx}]})
        numparts=${#parts[@]}
        if [ ${numparts} -lt 5 -o ${numparts} -gt 6 ]; then
            continue
        fi
        if [    "${parts[2]}" == "$1" \
             -a "${parts[3]}" == "$2" \
             -a "${parts[4]}" == "$3" \
             -a "${parts[5]}" == "$4" ]
        then
            retval="${parts[0]} ${parts[1]}"
        fi
        ((idx++))
    done
    echo "${retval}"
}

# ----------------------------------------------------------------------------
## @brief Add entry to test schedule.
#
# @param [in] date    The date at which the test should be run next.
# @param [in] time    The time at which the test should be run next.
# @param [in] project Name of the project.
# @param [in] branch  Name of the branch.
# @param [in] model   Name of the model.
#
# @returns Nothing.
function schedule_test
{
    idx=${#new_schedule[@]}
    new_schedule[${idx}]="$1 $2 $3 $4 $5"
}

# ============================================================================
# options
# ============================================================================

test_cmd="${_EXEC_DIR}/basistest-slave" # command used to run tests
verbose=0                               # verbosity of output messages
dry='false'                             # whether this is a dry testing run

while [ $# -gt 0 ]; do
    case "$1" in
        -c|--conf)
            shift
            if [ $# -gt 0 ]; then
                conf_file=$1
            else
                echo "Option --conf requires an argument!" 1>&2
                exit 1
            fi
            ;;
        -t|--testcmd)
            shift
            if [ $# -gt 0 ]; then
                test_cmd=$1
            else
                echo "Option --testcmd requires an argument!" 1>&2
                exit 1
            fi
            ;;
        -s|--schedule)
            shift
            if [ $# -gt 0 ]; then
                schedule_file=$1
            else
                echo "Option --schedule requires an argument!" 1>&2
                exit 1
            fi
            ;;
        --dry) dry='true'; ;;

        # standard options
        -h|--help)    print_help; exit 0; ;;
        -u|--usage)   print_helpshort; exit 0; ;;
        -V|--version) print_version "@NAME@"; exit 0; ;;
        -v|--verbose) (( verbose++ )); ;;

        # invalid option
        *)
            print_helpshort
            echo
            echo "Invalid option $1!" 1>&2
            exit 1
            ;;
    esac
    shift
done

# ============================================================================
# main
# ============================================================================

# check existence of configuration file
if [ ! -f "${conf_file}" ]; then
    echo "Missing configuration file \"${conf_file}\"" 1>&2
    exit 1
fi

# parse existing test schedule
schedule=()
new_schedule=()
if [ -f "${schedule_file}" ]; then
    idx=0
    while read line; do
        schedule[${idx}]=${line}
        ((idx++))
    done < ${schedule_file}
fi

# variables set by readConfLine () which store the configuration for a
# particular test run
minutes=0
hours=0
days=0
project=''
branch=''
model=''
options=''

# read configuration file line by line
linenumber=0
errors=0
while read line; do
    ((linenumber++))
    # skip empty lines
    if [ -z "${line}" ]; then continue; fi
    # skip comments
    if [[ "${line}" =~ "^#" ]]; then continue; fi
    # sanitize line
    line=${line//\*/x}
    # "parse" line
    parts=(${line})
    num=${#parts[@]}
    if [ ${num} -lt 4 ]; then
        echo "${conf_file}:${linenumber}: Invalid configuration, skipping test" 1>&2
        (( errors++ ))
        continue
    fi
    minutes=${parts[0]}
    hours=${parts[1]}
    days=${parts[2]}
    project=${parts[3]}
    branch=${parts[4]}
    model=${parts[5]}
    options=${parts[6]}
    # check arguments
    if [ -z "${minutes}" -o -z "${hours}" -o -z "${days}" ]; then
        echo "${conf_file}:${linenumber}: Invalid configuration, skipping test" 1>&2
        (( errors++ ))
        continue
    fi
    if [ "${minutes}" == "x" ]; then minutes=0; fi
    if [ "${hours}"   == "x" ]; then hours=0;   fi
    if [ "${days}"    == "x" ]; then days=0;   fi
    if [ ${minutes} -eq 0 -a ${hours} -eq 0 -a ${days} -eq 0 ]; then
        echo "${conf_file}:${linenumber}: Invalid test interval, skipping test" 1>&2
        (( errors++ ))
        continue
    fi
    if [ -z "${project}" ]; then
        echo "${conf_file}:${linenumber}: No project name given, skipping test" 1>&2
        (( errors++ ))
        continue
    fi
    if [ -z "${branch}" ]; then
        branch='trunk'
    fi
    if [ -z "${model}" ]; then
        model='Nightly'
    fi
    # determine whether test is already due for execution
    next_date=$(schedule_date ${project} ${branch} ${model} ${options})
    if [ $(date_diff -m "$(date '+%Y-%m-%d %T')" "${next_date}") -gt 0 ]; then
        if [ ${verbose} -gt 0 ]; then
            echo "Next ${model} test of ${project} (${branch}) with options \"${options}\" is scheduled for ${next_date}"
        fi
        # skip test as it is not yet scheduled for execution
        schedule_test "${next_date}" "${project}" "${branch}" "${model}" "${options}"
        continue
    fi
    # run test
    run_test "${project}" "${branch}" "${model}" "${options}"
    if [ $? -ne 0 ]; then
        echo "${conf_file}:${linenumber}: Failed to run test" 1>&2
        (( errors++ ))
        # do not retry failing test too often
        minutes=0
        hours=1
        days=0
    fi
    # update time of next execution
    minutes=$((minutes + hours * 60 + days * 1440))
    next_date=$(date_add -m "$(date '+%Y-%m-%d %T')" "${minutes}")
    schedule_test "${next_date}" "${project}" "${branch}" "${model}" "${options}"
    if [ $? -ne 0 ]; then
        echo "${conf_file}:${linenumber}: Failed to reschedule test" 1>&2
        (( errors++ ))
    fi
    if [ ${verbose} -gt 0 ]; then
        echo "Test will re-execute in ${minutes} minutes from now ($(date '+%Y-%m-%d %T')), i.e., not before ${next_date}"
    fi
done < "${conf_file}"

# write new schedule to temporary file
idx=0
num=${#new_schedule[@]}
if [ -f "${schedule_file}.temp" ]; then
    rm -f "${schedule_file}.temp"
fi
while [ ${idx} -lt ${num} ]; do
    echo ${new_schedule[${idx}]} >> "${schedule_file}.temp"
    if [ $? -ne 0 ]; then
        echo "Failed to write schedule to temporary file \"${schedule_file}.temp\"!" 1>&2
        exit 1;
    fi
    (( idx++ ))
done
# sort schedule
if [ -f "${schedule_file}.temp" ]; then
    sort "${schedule_file}.temp" -o "${schedule_file}.temp"
    if [ $? -ne 0 ]; then
        echo "Failed to sort temporary schedule file \"${schedule_file}.temp\"!" 1>&2
        exit 1
    fi
fi
# and then replace previous schedule file
if [ -f "${schedule_file}.temp" ]; then
    mv -f "${schedule_file}.temp" "${schedule_file}"
    if [ $? -ne 0 ]; then
        echo "Failed to update schedule file \"${schedule_file}\"!" 1>&2
        exit 1
    fi
fi

# done
[ ${errors} -eq 0 ]

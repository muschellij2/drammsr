.. raw:: html

   <!--

   ============================================================================

      DO NOT EDIT THIS FILE! It was generated using Sphinx from:

      Origin:   $URL: https://schuha@sbia-svn.uphs.upenn.edu/projects/BASIS/tags/basis-2.1.4/doc/standard/modules.rst $
      Revision: $Rev: 2962 $

   ============================================================================

   -->

.. meta::
    :description: This article details the project modularization implemented by
                  BASIS, a build system and software implementation standard.

======================
Project Modularization
======================

This article details the design and implementation of the project
modularization, where a project, also referred to as top-level project
(note that BASIS only allows one level of submodularization),
can have other projects as subprojects (referred to as modules in this
context to distinguish them from the superproject/subproject relationship
in case of the superbuild approach, see below).
The project modules are conceptual cohesive groups of the project files.

A top-level project can also be described as a modularized project,
where each module of this project may depend on other modules of the
same project or external projects (also referred to as packages).
Note that an external project can also be another top-level project which
utilizes the same project modularization as discussed herein.
The idea, and partly the CMake implementation, has been borrowed from the
`ITK 4`_ project. See the Wiki of this project for details on the
`ITK 4 Modularization`_.


Implementation
==============

The modularization is mainly implemented by the :apidoc:`ProjectTools.cmake`
module, in particular, the :apidoc:`basis_project_modules()` function which is
called at the very top of the :apidoc:`basis_project_impl()` macro, which is
the foundation for the root CMake configuration file (``CMakeLists.txt``) of
every BASIS project. The :apidoc:`basis_project_modules()` function searches
the subdirectories in the ``modules/`` directory for the presence of the
:apidoc:`BasisProject.cmake` file. It then loads this file, to retrieve the
meta-data of each module, i.e., its name and dependencies. It then adds for
each module a ``MODULE_<module>`` option to the build configuration. When this
option is set to ``OFF``, the module is excluded from both the project build
and any package generated by CPack_. Otherwise, if it is set to ``ON``,
the module is build as part of the top-level project. These options are
superceded by the ``BUILD_ALL_MODULES`` option if this option is set to ``ON``,
however.

Besides adding these options, the :apidoc:`basis_project_modules()`
function ensures that the modules are configured and build in the right order,
such that a module which is needed by another module is build prior to this
dependent module. Moreover, it helps the :apidoc:`basis_find_package()` function
to find the other modules, in particular their configured package configuration
files, which are either generated from the default
:apidoc:`Config.cmake.in <BASISConfig.cmake>` file or a corresponding file found
in the ``config/`` directory of each module.

The other BASIS CMake functions may further change their actual behaviour
depending on the ``PROJECT_IS_MODULE`` variable which specifies whether the
project that is currently being configured is a module of another project
(i.e., ``PROJECT_IS_MODULE`` is ``TRUE``) or a top-level project
(i.e., ``PROJECT_IS_MODULE`` is ``FALSE``).

.. todo::

    Add reference to documentation of superbuild approach, which is yet not
    implemented as part of BASIS.


.. _ITK 4: http://www.itk.org/Wiki/ITK_Release_4
.. _ITK 4 Modularization: http://www.vtk.org/Wiki/ITK_Release_4/Modularization
.. _CPack: http://www.cmake.org/cmake/help/v2.8.8/cpack.html

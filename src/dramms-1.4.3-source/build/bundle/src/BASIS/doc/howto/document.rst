.. raw:: html

   <!--

   ============================================================================

      DO NOT EDIT THIS FILE! It was generated using Sphinx from:

      Origin:   $URL: https://schuha@sbia-svn.uphs.upenn.edu/projects/BASIS/tags/basis-2.1.4/doc/howto/document.rst $
      Revision: $Rev: 3030 $

   ============================================================================

   -->

.. meta::
    :description: How to document software following BASIS, a build system and
                  software implementation standard.

====================
Documenting Software
====================

.. note:: This how-to guide is yet not complete.

BASIS supports two well-known and established documentation generation tools:
Doxygen_ and Sphinx_.

Since version 1.8.0, Doxygen can natively generate documentation from C/C++,
Java, Python, Tcl, and Fortran. The markup language used to format documentation
comments was originally a set of commands inherited from Javadoc.
More recently, Doxygen further adopted Markdown_ and elements from `Markdown Extra`_.
To extend the reportoire of programming languages processed by Doxygen, so-called
custom Doxygen filters can be provided which transform any source code into
the syntax of one of the languages well understood by Doxygen. The target language
used is commonly C/C++ as this is the language best understood by Doxygen.
The goal of BASIS is to provide one such filter for each programming language
supported by it but not by Doxygen, i.e., Bash, Perl, and MATLAB. Moreover, a
Doxygen filter for Python allows the use of Doxygen tags within doc strings as
well by converting doc strings to Doxygen-style comments.

Besides Doxygen, BASIS makes use of Sphinx for the alternative documentation
generation from Python source code and corresponding doc strings. The markup
language used by Sphinx is reStructuredText_ (reST). The wide spectrum of output formats,
including in particular, HTML, LaTeX, and man pages, supported by the Docutils
which include the tools to process reST and are further utilized by Sphinx,
the preferred way of writing a software manual, developer's guide, tutorial slides,
and a project web site is by providing text files marked up using reST which are
then processed by Sphinx to generate documentation in the desired output format.

The two Sphinx extensions breathe_ and doxylink_ which are included with BASIS
can be used to include, respectively, link to the the documentation generated
by Doxygen from the documentation generated by Sphinx. The latter only for the
HTML output, which, however, is the most commonly used and preferred output
format. Given that the project web site and manuals are generated by Sphinx and
only the more advanced reference documentation is generated by Doxygen, this
one directional linking of documentation pages is sufficient for most use cases.

Last but not least, Markdown and Markdown Extra can be used as an alternative to
reStructuredText for additional documentation pages. This is in particular of
interest for the root package documentation files such as the AUTHORS, README,
INSTALL, and COPYING files. Many online hosting platforms for the distribution
of open source software such as SourceForge and GitHub can display such files
on the project page with the marked up formatting.

.. note:: At the moment, not all of these documentation tools are supported for
          all the programming languages considered.


ChangeLog
=========

Generated from revision history.

Software Manual
===============

Introduces users to software tools and guides them through example application.

Developer's Guide
=================

Describes implementation details.

API Documentation
=================

Documentation generated from source code and in-source comments.


Software Web Site
=================

A web site can be created using the documentation generation tool Sphinx_.
The main input to this tool are text files written in the lightweight markup language
reStructuredText_. A default theme for use at SBIA has been created which is part
of BASIS. This theme together with the text files that define the content and
structure of the site, the HTML pages of the software web site can be generated
by ``sphinx-build``. The CMake function `basis_add_doc()`_ provides an easy way
to add such web site target to the build configuration. For example, the
template ``doc/CMakeLists.txt`` file contains the following section:

.. code-block:: cmake

    # ----------------------------------------------------------------------------
    # web site (optional)
    if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/site/index.rst")
      basis_add_doc (
        site
        GENERATOR     Sphinx
        BUILDER       html dirhtml pdf man
        MAN_SECTION   7
        HTML_THEME    sbia
        HTML_SIDEBARS globaltoc
        RELLINKS      installation documentation publications people
        COPYRIGHT     "<year> University of Pennsylvania"
        AUTHOR        "<author>"
      )
    endif ()

where <year> and <author> should be replaced by the proper values. This is usually done
by the :doc:`basisproject <create-and-modify-project>` command-line tool upon creation
of a new project.

This CMake code adds a build target named ``site`` which invokes ``sphinx-build``
with the proper default configuration to generate a web site from the reST
source files with file name extension ``.rst`` found in the ``site/`` subdirectory.
The source file of the main page, the so-called master document, of the web site
must be named ``index.rst``. The main pages which are linked in the top
navigation bar are named using the ``RELLINKS`` option of `basis_add_sphinx_doc()`_,
the CMake function which implements the addition of a Sphinx documentation target.
The corresponding source files must be named after these links. For example, given
above CMake code, the reStructuredText source of the page with the download
instructions has to be saved in the file ``site/download.rst``.

See the :ref:`corresponding section <Build>` of the :doc:`install`
guide for details on how to generate the HTML pages from the reST source
files given the specification of a Sphinx documentation build target such as the
``site`` target defined by above template CMake code.


.. _basis_add_doc(): http://www.rad.upenn.edu/sbia/software/basis/apidoc/v2.1/group__CMakeAPI.html#ga06f94c5d122393ad4e371f73a0803cfa
.. _basis_add_sphinx_doc(): http://www.rad.upenn.edu/sbia/software/basis/apidoc/v2.1/DocTools_8cmake.html#a628468ae6c7b29570a73a2d63eebf257
.. _Doxygen: http://www.doxygen.org/
.. _Sphinx: http://sphinx.pocoo.org/
.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _Markdown: http://daringfireball.net/projects/markdown/
.. _Markdown Extra: http://michelf.ca/projects/php-markdown/extra/
.. _breathe: https://github.com/michaeljones/breathe
.. _doxylink: http://packages.python.org/sphinxcontrib-doxylink/

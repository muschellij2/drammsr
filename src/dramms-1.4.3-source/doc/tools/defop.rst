.. raw:: html

   <!--

   ============================================================================

      DO NOT EDIT THIS FILE! It was generated using Sphinx from:

      Origin:   $URL: https://sbia-svn.uphs.upenn.edu/projects/DRAMMS/branches/dramms-1.4/doc/tools/defop.rst $
      Revision: $Rev: 2180 $

   ============================================================================

   -->

.. title:: Operations on Deformation


=========================
Operations on Deformation
=========================

.. _readdisplacement:

Read Displacement At A Voxel
============================

To display the displacement of the voxel (x,y,z) in the deformation ``def.nii.gz`` in the command window, and its corresponding voxel location (x', y', z'), use the following command::

    dramms-defop -c  ${x},${y},${z}  def.nii.gz

.. caution:: People often natually think that this program takes the coordinate of the SOURCE image, and output the corresponding location in the TARGET image. In practice, the reverse is true. This dramms-defop programs reads the coordinate in the TARGET image space, and displaces how it has been displaced into a corresponding voxel in the SOURCE image. This is counter-intuitive. You can think it this way: after registration, everything is in the target image space --- the source image has been deformed into target image space, so the deformation is actually defined in the target image space, and so it reads the coordinates of the target image.


	
.. _multiplytransformation:

Multiply/Divide A Transformation By A User-Input Factor
========================================================

Multiply a transformation (affine matrix or deformation) by a factor::

    dramms-defop -m ${factor}  ${in_transform}  ${out_transform}

Divide a transformation (affine matrix or deformation) by a factor::

    dramms-defop -d ${factor}  ${in_transform}  ${out_transform}
	

.. _invertdeformation:

Invert A Transformation
=======================

Invert an affine matrix: ::

    dramms-defop -i  affine.mat  inverted_affine.mat

	
Invert a deformation: ::

    dramms-defop -i  def.nii.gz  inverted_def.nii.gz

.. caution:: Inverting a deformation is a numrical approximation process subject to lots of potential
             errors. Therefore, please bear in mind
             1) try avoiding inverting deformations as much as you can;
             2) absolutely avoid inversion when the target and source images do not have the same image size.
             Generally, we recommend to re-run the ``dramms`` registration, swapping the
             source and the target images.

.. _multiplydeformation:

Multiply A Deformation with A number
====================================

We can multiply a deformation by a float number ${lambda} ::

    dramms-defop -m ${lambda}  def.nii.gz  def_multipliedby_lambda.nii.gz



.. _dividedeformation:

Divide A Deformation By A Number
==================================

We can divide a deformation by a float number ${lambda} ::

    dramms-defop -d ${lambda} def.nii.gz  def_dividedby_lambda.nii.gz


.. _squaredeformation:

Square a Deformation
=====================

We can square the displacement at every voxel of a deformation ::

    dramms-defop -s def.nii.gz   def_squared.nii.gz



.. _sqrtdeformation:

Square Root of a Deformation
=============================

We can calculate the squre root of a deformation at each voxel (0 when the displacement is negative at a voxel) ::

    dramms-defop -r def.nii.gz   def_sqrt.nii.gz






##############################################################################
# @file  testaux.py
# @brief Utilities for test implementations.
#
# Copyright (c) 2011 University of Pennsylvania. All rights reserved.<br />
# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
##############################################################################

# ============================================================================
# modules
# ============================================================================

import os
import sys
import shutil
import getopt
import socket

from basis import basis

# ============================================================================
# constants
# ============================================================================

TEST_NAME      = os.path.splitext(os.path.basename(basis.exename()))[0]
BASIS_DIR      = '@TESTING_BASIS_DIR@'
RESSOURCES_DIR = os.path.join('@PROJECT_TESTING_DIR@/ressources', TEST_NAME)
SOURCE_DIR     = os.path.join('@TESTING_OUTPUT_DIR@', TEST_NAME, 'source')
BUILD_DIR      = os.path.join('@TESTING_OUTPUT_DIR@', TEST_NAME, 'build')

# ============================================================================
# helpers
# ============================================================================

# ----------------------------------------------------------------------------
def parse_arguments(flags='v', options=['verbose'], allow_args=False):
    "Parse test arguments."
    sys.stdout.write("<DartMeasurement name=\"Host Name\" type=\"string\">");
    sys.stdout.write(socket.gethostname());
    sys.stdout.write("</DartMeasurement>\n");
    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], flags, options)
        if not allow_args and len(args) > 0:
            sys.stderr.write("Unhandled positional parameters given!\n")
            sys.stderr.write("Arguments: " + repr(args) + "\n")
            sys.exit(1)
    except getopt.GetoptError, e:
        sys.stderr.write(str(e) + '\n')
        sys.exit(1)
    if allow_args: return opts, args
    else: return opts

# ----------------------------------------------------------------------------
def create_project(name, *args, **kwargs):
    "Create test project."
    print "Creating test project..."
    description = kwargs.get('description', 'This is a test project.')
    use = kwargs.get('use', [])
    useopt = kwargs.get('useopt', [])
    if os.path.exists(SOURCE_DIR): shutil.rmtree(SOURCE_DIR)
    # attention: changing the project name will affect the tests!
    create_cmd = ['basis.basisproject',
            '--name', name,
            '--description', description,
            '--root', SOURCE_DIR]
    create_cmd.extend(args)
    for pkg in use:
        create_cmd.extend(['--use', pkg])
    for pkg in useopt:
        create_cmd.extend(['--useopt', pkg])
    basis.execute(create_cmd, verbose=True)
    print "Creating test project... - done"

# ----------------------------------------------------------------------------
def update_project(name, *args, **kwargs):
    "Update test project."
    print "Updating test project..."
    use = kwargs.get('use', [])
    useopt = kwargs.get('useopt', [])
    if not os.path.isdir(SOURCE_DIR):
        raise Exception("Cannot update non-existing project in %s" % SOURCE_DIR)
    update_cmd = ['basis.basisproject', '--root', SOURCE_DIR]
    update_cmd.extend(args)
    for pkg in use:
        update_cmd.extend(['--use', pkg])
    for pkg in useopt:
        update_cmd.extend(['--useopt', pkg])
    basis.execute(update_cmd, verbose=True)
    print "Updating test project... - done"

# ----------------------------------------------------------------------------
def build_project(verbose=0, cmakeopts=None):
    "Build test project."
    print "Configuring test project..."
    if os.path.exists(BUILD_DIR): shutil.rmtree(BUILD_DIR)
    os.makedirs(BUILD_DIR)
    wd=os.getcwd()
    os.chdir(BUILD_DIR)
    config_cmd=['@CMAKE_COMMAND@',
            '-DBUILD_DOCUMENTATION:BOOL=OFF',
            '-DBUILD_CHANGELOG:BOOL=OFF',
            '-DBUILD_TESTING:BOOL=ON',
            '-DBASIS_DIR:PATH=' + BASIS_DIR,
            '-DCMAKE_BUILD_TYPE:STRING=@TESTING_BUILD_TYPE@']
    if cmakeopts != None: config_cmd.extend(cmakeopts)
    if '@TESTING_C_FLAGS@' != '':
        config_cmd.append('-DCMAKE_C_FLAGS:STRING=@TESTING_C_FLAGS@')
    if '@TESTING_CXX_FLAGS@' != '':
        config_cmd.append('-DCMAKE_CXX_FLAGS:STRING=@TESTING_CXX_FLAGS@')
    if '@TESTING_EXE_LINKER_FLAGS@' != '':
        config_cmd.append('-DCMAKE_EXE_LINKER_FLAGS:STRING=@TESTING_EXE_LINKER_FLAGS@')
    if '@TESTING_SHARED_LINKER_FLAGS@' != '':
        config_cmd.append('-DCMAKE_SHARED_LINKER_FLAGS:STRING=@TESTING_SHARED_LINKER_FLAGS@')
    if '@TESTING_MODULE_LINKER_FLAGS@' != '':
        config_cmd.append('-DCMAKE_MODULE_LINKER_FLAGS:STRING=@TESTING_MODULE_LINKER_FLAGS@')
    if verbose > 0:
        config_cmd.append('-DBASIS_VERBOSE:BOOL=ON')
    if verbose > 1:
        config_cmd.append('-DBASIS_DEBUG:BOOL=ON')
    config_cmd.append(SOURCE_DIR)
    basis.execute(config_cmd, verbose=True)
    print "Configuring test project... - done"
    print "Building test project..."
    build_cmd = None
    if sys.platform == 'win32':
        solution_file = False
        for f in os.listdir(BUILD_DIR):
            if f.endswith('.sln'):
                solution_file = os.path.join(BUILD_DIR, f)
                break
        if solution_file:
            build_cmd = ['devenv', solution_file, '/build']
            if '@TESTING_BUILD_TYPE@' != '': build_cmd.append('@TESTING_BUILD_TYPE@')
            else: build_cmd.append('Release')
    if not build_cmd:
        build_cmd = ['make']
        if verbose > 0: build_cmd.append('VERBOSE=1')
    basis.execute(build_cmd, verbose=True)
    print "Building test project... - done"
    os.chdir(wd)

# ----------------------------------------------------------------------------
def run_tests(verbose=0):
    """Run tests by invoking CTest in the build directory."""
    wd=os.getcwd()
    os.chdir(BUILD_DIR)
    test_cmd=['@CMAKE_CTEST_COMMAND@', '-V']
    if verbose > 0: test_cmd.append('-V')
    if sys.platform == 'win32':
        test_cmd.append('-C')
        if '@TESTING_BUILD_TYPE@' != '': test_cmd.append('@TESTING_BUILD_TYPE@')
        else: test_cmd.append('Release')
    test_cmd.extend(sys.argv[1:])
    basis.execute(test_cmd, verbose=True)
    os.chdir(wd)

# ----------------------------------------------------------------------------
def add_file(file, prefix='.', name=None):
    """Copy file from ressources directory to project source tree.
    
    @param [in] file   File path relative to top directory of ressources tree.
    @param [in] prefix Path prefix relative to project source tree. Defaults
                       to the root of the project source tree itself.
    @param [in] name   Name of file in project source tree. Defaults to the
                       name of the file given by @p file.
    
    """
    if not name: name = os.path.basename(file)
    dstdir = os.path.join(SOURCE_DIR, prefix, os.path.dirname(file))
    if not os.path.isdir(dstdir):
        os.makedirs(dstdir)
    dst = os.path.join(dstdir, name)
    shutil.copy(os.path.join(RESSOURCES_DIR, file), dst)
    print "Added file " + dst

# ----------------------------------------------------------------------------
def add_dependency(package, required=True):
    "Add package to list of project dependencies."
    fp = open(os.path.join(SOURCE_DIR, 'BasisProject.cmake'), "r")
    code = fp.read()
    fp.close()
    if required:
        code = code.replace('#<dependency>', package + '\n    #<dependency>')
    else:
        code = code.replace('#<optional-dependency>', package + '\n    #<optional-dependency>')
    fp = open(os.path.join(SOURCE_DIR, 'BasisProject.cmake'), "w")
    fp.write(code)
    fp.close()
    if required: print "Added dependency on " + package
    else: print "Added optional dependency on " + package

# ----------------------------------------------------------------------------
def add_cmake_code(cmakefile, code):
    "Add CMake code to CMakeLists.txt file."
    cmakefile = os.path.join(SOURCE_DIR, cmakefile)
    if not os.path.exists(cmakefile):
        raise Exception('File ' + cmakefile + ' does not exist!')
    fp = open(os.path.join(SOURCE_DIR, cmakefile), 'a')
    fp.write(code + '\n')
    fp.close()
    print "Modified file " + cmakefile

# ----------------------------------------------------------------------------
def cleanup():
    "Cleanup source and binary tree."
    if os.path.exists(SOURCE_DIR): shutil.rmtree(SOURCE_DIR)
    if os.path.exists(BUILD_DIR):  shutil.rmtree(BUILD_DIR)
